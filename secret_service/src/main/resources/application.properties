
#server.port = 12032


#logging.file = myapp.log
#spring.output.ansi.enabled = DETECT


spring.profiles.active = @env@


spring.datasource.driver-class-name = com.mysql.cj.jdbc.Driver
spring.datasource.type = com.alibaba.druid.pool.DruidDataSource
# 初始化时建立物理连接的个数
spring.datasource.initialSize = 5
# 最小连接池数量
spring.datasource.minIdle = 5
# 最大连接池数量
spring.datasource.maxActive = 20
# 用来检测连接是否有效的sql，为null时，testOnBorrow、testOnReturn、testWhileIdle都不会其作用
spring.datasource.validationQuery = SELECT 1 FROM DUAL
# 申请连接时执行validationQuery检测连接是否有效
spring.datasource.testOnBorrow = false
# 归还连接时执行validationQuery检测连接是否有效
spring.datasource.testOnReturn = false
# 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效
spring.datasource.testWhileIdle = true
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis = 60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis = 300000
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements = true
spring.datasource.maxPoolPreparedStatementPerConnectionSize = 20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters = stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties = druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat = true


mybatis.config-location = classpath:mybatis-config.xml
#mybatis.type-aliases-package = org.scy.getstart.model
#mybatis.mapper-locations = classpath:org/scy/getstart/mapper/*.xml


feign.httpclient.enabled = true
#feign.hystrix.enabled = true


app.version = "1.0.0_2002131400"
#app.code = 5737603781490856
#app.secret = lBjxuDhkR7jtojwI


#app.cache-service.url = http://127.0.0.1:12030
#app.session-service.url = http://127.0.0.1:12031
#app.priv-service.url = http://127.0.0.1:12031
